"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/supplier/page",{

/***/ "(app-pages-browser)/./src/app/api/scripts.js":
/*!********************************!*\
  !*** ./src/app/api/scripts.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkDbConnection: () => (/* binding */ checkDbConnection),\n/* harmony export */   countTable: () => (/* binding */ countTable),\n/* harmony export */   deleteIDRecipetable: () => (/* binding */ deleteIDRecipetable),\n/* harmony export */   fetchAndDisplayUsers: () => (/* binding */ fetchAndDisplayUsers),\n/* harmony export */   fetchTableData: () => (/* binding */ fetchTableData),\n/* harmony export */   insertCheftable: () => (/* binding */ insertCheftable),\n/* harmony export */   projectMenuItemTable: () => (/* binding */ projectMenuItemTable),\n/* harmony export */   resetTable: () => (/* binding */ resetTable),\n/* harmony export */   selectEquipmentTable: () => (/* binding */ selectEquipmentTable),\n/* harmony export */   updateNameRecipetable: () => (/* binding */ updateNameRecipetable)\n/* harmony export */ });\n/*\r\n * These functions below are for various webpage functionalities. \r\n * Each function serves to process data on the frontend:\r\n *      - Before sending requests to the backend.\r\n *      - After receiving responses from the backend.\r\n * \r\n * To tailor them to your specific needs,\r\n * adjust or expand these functions to match both your \r\n *   backend endpoints \r\n * and \r\n *   HTML structure.\r\n * \r\n */ // This function checks the database connection and updates its status on the frontend.\nasync function checkDbConnection() {\n    const statusElem = document.getElementById('dbStatus');\n    const loadingGifElem = document.getElementById('loadingGif');\n    const response = await fetch('/api/controller?action=check-db-connection', {\n        method: \"GET\"\n    });\n    // Hide the loading GIF once the response is received.\n    loadingGifElem.style.display = 'none';\n    // Display the statusElem's text in the placeholder.\n    statusElem.style.display = 'inline';\n    response.json().then((res)=>{\n        statusElem.textContent = \" \" + res.message;\n    }).catch((error)=>{\n        statusElem.textContent = 'connection timed out'; // Adjust error handling if required.\n    });\n}\n// Fetches data from the demotable and displays it.\nasync function fetchAndDisplayUsers(name) {\n    const tableElement = document.getElementById('Cheftable');\n    const tableBody1 = tableElement.querySelector('tbody');\n    const response = await fetch(\"/api/controller?action=table&name=\".concat(name), {\n        method: 'GET'\n    });\n    const responseData = await response.json();\n    const demotableContent = responseData.data;\n    // Always clear old, already fetched data before new fetching process.\n    if (tableBody1) {\n        tableBody1.innerHTML = '';\n    }\n    demotableContent.forEach((user)=>{\n        const row = tableBody1.insertRow();\n        user.forEach((field, index)=>{\n            const cell = row.insertCell(index);\n            cell.textContent = field;\n        });\n    });\n}\n// This function resets or initializes the demotable.\nasync function resetTable(name) {\n    const response = await fetch(\"/api/controller?action=initiate-table&name=\".concat(name), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({})\n    });\n    const responseData = await response.json();\n    responseHandler(responseData, 'resetResultMsg', name, \"Table reset successfully!\", \"Error initiating table!\");\n}\n// Inserts new records into the demotable.\nasync function insertCheftable(event, name) {\n    event.preventDefault();\n    const nameValue = event.target.elements[0].value;\n    const YOEValue = event.target.elements[1].value;\n    const seniorityValue = event.target.elements[2].value;\n    const licenseValue = event.target.elements[3].value;\n    const response = await fetch(\"/api/controller?action=insert-table&name=\".concat(name), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            chef_name: nameValue,\n            years_of_experience: YOEValue,\n            seniority: seniorityValue,\n            cooking_license: licenseValue\n        })\n    });\n    const responseData = await response.json();\n    responseHandler(responseData, 'insertResultMsg', name, \"Data inserted successfully!\", \"Error inserting data!\");\n}\nasync function selectEquipmentTable(event, name) {\n    event.preventDefault();\n    const tableElement = document.getElementById('Cheftable');\n    const tableBody1 = tableElement.querySelector('tbody');\n    tableBody1.innerHTML = '';\n    const condition = event.target.elements[0].checked ? \"both\" : \"individual\";\n    const nameString = event.target.elements[2].value;\n    const materialString = event.target.elements[3].value;\n    const response = await fetch(\"/api/controller?action=select-equipment-table\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            condition,\n            nameString,\n            materialString\n        })\n    });\n    const responseData = await response.json();\n    const data = responseData.data;\n    data.forEach((user)=>{\n        const row = tableBody1.insertRow();\n        user.forEach((field, index)=>{\n            const cell = row.insertCell(index);\n            cell.textContent = field;\n        });\n    });\n// cant refetch data from the table\n}\nasync function projectMenuItemTable(event, attributes) {\n    event.preventDefault();\n    const response = await fetch(\"/api/controller?action=project-menu-item-table\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            attributes\n        })\n    });\n    const responseData = await response.json();\n    const data = responseData.data;\n    console.log(data);\n    data.forEach((user)=>{\n        const row = tableBody.insertRow();\n        user.forEach((field, index)=>{\n            const cell = row.insertCell(index);\n            cell.textContent = field;\n        });\n    });\n// cant refetch data from the table\n}\n// Counts rows in the demotable.\n// Modify the function accordingly if using different aggregate functions or procedures.\nasync function countTable(name) {\n    const response = await fetch(\"/api/controller?action=count-table&name=\".concat(name), {\n        method: 'GET'\n    });\n    const responseData = await response.json();\n    const tupleCount = responseData.count;\n    const message = \"The number of tuples in demotable: \".concat(tupleCount);\n    responseHandler(responseData, 'countResultMsg', name, message, \"Error counting tuples!\");\n}\n// Updates names in the recipe table.\nasync function updateNameRecipetable(event, name) {\n    event.preventDefault();\n    const oldNameValue = document.getElementById('updateOldName').value;\n    const newNameValue = document.getElementById('updateNewName').value;\n    const response = await fetch(\"/api/controller?action=update-name-recipetable&name=\".concat(name), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            oldName: oldNameValue,\n            newName: newNameValue\n        })\n    });\n    const responseData = await response.json();\n    responseHandler(responseData, 'updateResultMsg', name, \"Name updated successfully!\", \"Error updating name!\");\n}\n// Delete ID in the recipe table.\nasync function deleteIDRecipetable(event, name) {\n    event.preventDefault();\n    const recipeId = document.getElementById('deleteOldId').value;\n    const response = await fetch(\"/api/controller?action=delete-id-recipetable&name=\".concat(name), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            recipeId\n        })\n    });\n    const responseData = await response.json();\n    responseHandler(responseData, 'deleteIdResultMsg', name, \"Recipe deleted successfully!\", \"Error deleting recipe!\");\n}\nfunction responseHandler(data, id, name, message, errMessage) {\n    const messageElement = document.getElementById(id);\n    if (data.success) {\n        data.textContent = message;\n        fetchTableData(name);\n    } else {\n        messageElement.textContent = errMessage;\n    }\n}\n// General function to refresh the displayed table data. \n// You can invoke this after any table-modifying operation to keep consistency.\nfunction fetchTableData(name) {\n    fetchAndDisplayUsers(name);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvYXBpL3NjcmlwdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUdELHVGQUF1RjtBQUNoRixlQUFlQTtJQUNsQixNQUFNQyxhQUFhQyxTQUFTQyxjQUFjLENBQUM7SUFDM0MsTUFBTUMsaUJBQWlCRixTQUFTQyxjQUFjLENBQUM7SUFFL0MsTUFBTUUsV0FBVyxNQUFNQyxNQUFNLDhDQUE4QztRQUN2RUMsUUFBUTtJQUNaO0lBQ0Esc0RBQXNEO0lBQ3RESCxlQUFlSSxLQUFLLENBQUNDLE9BQU8sR0FBRztJQUMvQixvREFBb0Q7SUFDcERSLFdBQVdPLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO0lBRTNCSixTQUFTSyxJQUFJLEdBQ1JDLElBQUksQ0FBQyxDQUFDQztRQUNIWCxXQUFXWSxXQUFXLEdBQUcsTUFBTUQsSUFBSUUsT0FBTztJQUM5QyxHQUNDQyxLQUFLLENBQUMsQ0FBQ0M7UUFDSmYsV0FBV1ksV0FBVyxHQUFHLHdCQUF5QixxQ0FBcUM7SUFDM0Y7QUFDUjtBQUVBLG1EQUFtRDtBQUM1QyxlQUFlSSxxQkFBcUJDLElBQUk7SUFDM0MsTUFBTUMsZUFBZWpCLFNBQVNDLGNBQWMsQ0FBQztJQUM3QyxNQUFNaUIsYUFBWUQsYUFBYUUsYUFBYSxDQUFDO0lBRTdDLE1BQU1oQixXQUFXLE1BQU1DLE1BQU0scUNBQTBDLE9BQUxZLE9BQVE7UUFDdEVYLFFBQVE7SUFDWjtJQUVBLE1BQU1lLGVBQWUsTUFBTWpCLFNBQVNLLElBQUk7SUFDeEMsTUFBTWEsbUJBQW1CRCxhQUFhRSxJQUFJO0lBRTFDLHNFQUFzRTtJQUN0RSxJQUFJSixZQUFXO1FBQ1hBLFdBQVVLLFNBQVMsR0FBRztJQUMxQjtJQUVBRixpQkFBaUJHLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDckIsTUFBTUMsTUFBTVIsV0FBVVMsU0FBUztRQUMvQkYsS0FBS0QsT0FBTyxDQUFDLENBQUNJLE9BQU9DO1lBQ2pC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Q3hDNkIsZ0JBQWdCakIsY0FBYyxtQkFBbUJKLE1BQU0sOEJBQThCO0FBQ3pGO0FBRUEsaUNBQWlDO0FBQzFCLGVBQWVxRCxvQkFBb0I5QixLQUFLLEVBQUV2QixJQUFJO0lBQ2pEdUIsTUFBTUMsY0FBYztJQUVwQixNQUFNOEIsV0FBV3RFLFNBQVNDLGNBQWMsQ0FBQyxlQUFlMkMsS0FBSztJQUU3RCxNQUFNekMsV0FBVyxNQUFNQyxNQUFNLHFEQUEwRCxPQUFMWSxPQUFRO1FBQ3RGWCxRQUFRO1FBQ1I0QixTQUFTO1lBQ0wsZ0JBQWdCO1FBQ3BCO1FBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztZQUNqQmtDO1FBQ0o7SUFDSjtJQUVBLE1BQU1sRCxlQUFlLE1BQU1qQixTQUFTSyxJQUFJO0lBQ3hDNkIsZ0JBQWdCakIsY0FBYyxxQkFBcUJKLE1BQU0sZ0NBQWdDO0FBQzdGO0FBRUEsU0FBU3FCLGdCQUFnQmYsSUFBSSxFQUFFaUQsRUFBRSxFQUFFdkQsSUFBSSxFQUFFSixPQUFPLEVBQUU0RCxVQUFVO0lBQ3hELE1BQU1DLGlCQUFpQnpFLFNBQVNDLGNBQWMsQ0FBQ3NFO0lBRS9DLElBQUlqRCxLQUFLb0QsT0FBTyxFQUFFO1FBQ2RwRCxLQUFLWCxXQUFXLEdBQUdDO1FBQ25CK0QsZUFBZTNEO0lBQ25CLE9BQU87UUFDSHlELGVBQWU5RCxXQUFXLEdBQUc2RDtJQUNqQztBQUNKO0FBRUEseURBQXlEO0FBQ3pELCtFQUErRTtBQUN4RSxTQUFTRyxlQUFlM0QsSUFBSTtJQUMvQkQscUJBQXFCQztBQUN6QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxwZXJyeVxcT25lRHJpdmVcXERlc2t0b3BcXENvbGxlZ2VcXFllYXIgM1xcVDJcXENQU0MgMzA0XFxwcm9qZWN0X2o0bTFuX24wdDF2X3Y3bDl0LW1haW5cXHNyY1xcYXBwXFxhcGlcXHNjcmlwdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogVGhlc2UgZnVuY3Rpb25zIGJlbG93IGFyZSBmb3IgdmFyaW91cyB3ZWJwYWdlIGZ1bmN0aW9uYWxpdGllcy4gXHJcbiAqIEVhY2ggZnVuY3Rpb24gc2VydmVzIHRvIHByb2Nlc3MgZGF0YSBvbiB0aGUgZnJvbnRlbmQ6XHJcbiAqICAgICAgLSBCZWZvcmUgc2VuZGluZyByZXF1ZXN0cyB0byB0aGUgYmFja2VuZC5cclxuICogICAgICAtIEFmdGVyIHJlY2VpdmluZyByZXNwb25zZXMgZnJvbSB0aGUgYmFja2VuZC5cclxuICogXHJcbiAqIFRvIHRhaWxvciB0aGVtIHRvIHlvdXIgc3BlY2lmaWMgbmVlZHMsXHJcbiAqIGFkanVzdCBvciBleHBhbmQgdGhlc2UgZnVuY3Rpb25zIHRvIG1hdGNoIGJvdGggeW91ciBcclxuICogICBiYWNrZW5kIGVuZHBvaW50cyBcclxuICogYW5kIFxyXG4gKiAgIEhUTUwgc3RydWN0dXJlLlxyXG4gKiBcclxuICovXHJcblxyXG5cclxuLy8gVGhpcyBmdW5jdGlvbiBjaGVja3MgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gYW5kIHVwZGF0ZXMgaXRzIHN0YXR1cyBvbiB0aGUgZnJvbnRlbmQuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0RiQ29ubmVjdGlvbigpIHtcclxuICAgIGNvbnN0IHN0YXR1c0VsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGJTdGF0dXMnKTtcclxuICAgIGNvbnN0IGxvYWRpbmdHaWZFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmdHaWYnKTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2NvbnRyb2xsZXI/YWN0aW9uPWNoZWNrLWRiLWNvbm5lY3Rpb24nLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiXHJcbiAgICB9KTtcclxuICAgIC8vIEhpZGUgdGhlIGxvYWRpbmcgR0lGIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJlY2VpdmVkLlxyXG4gICAgbG9hZGluZ0dpZkVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIC8vIERpc3BsYXkgdGhlIHN0YXR1c0VsZW0ncyB0ZXh0IGluIHRoZSBwbGFjZWhvbGRlci5cclxuICAgIHN0YXR1c0VsZW0uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUnO1xyXG5cclxuICAgIHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgc3RhdHVzRWxlbS50ZXh0Q29udGVudCA9IFwiIFwiICsgcmVzLm1lc3NhZ2U7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIHN0YXR1c0VsZW0udGV4dENvbnRlbnQgPSAnY29ubmVjdGlvbiB0aW1lZCBvdXQnOyAgLy8gQWRqdXN0IGVycm9yIGhhbmRsaW5nIGlmIHJlcXVpcmVkLlxyXG4gICAgICAgIH0pO1xyXG59XHJcblxyXG4vLyBGZXRjaGVzIGRhdGEgZnJvbSB0aGUgZGVtb3RhYmxlIGFuZCBkaXNwbGF5cyBpdC5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQW5kRGlzcGxheVVzZXJzKG5hbWUpIHtcclxuICAgIGNvbnN0IHRhYmxlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdDaGVmdGFibGUnKTtcclxuICAgIGNvbnN0IHRhYmxlQm9keSA9IHRhYmxlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCd0Ym9keScpO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvY29udHJvbGxlcj9hY3Rpb249dGFibGUmbmFtZT0ke25hbWV9YCwge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCdcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGNvbnN0IGRlbW90YWJsZUNvbnRlbnQgPSByZXNwb25zZURhdGEuZGF0YTtcclxuXHJcbiAgICAvLyBBbHdheXMgY2xlYXIgb2xkLCBhbHJlYWR5IGZldGNoZWQgZGF0YSBiZWZvcmUgbmV3IGZldGNoaW5nIHByb2Nlc3MuXHJcbiAgICBpZiAodGFibGVCb2R5KSB7XHJcbiAgICAgICAgdGFibGVCb2R5LmlubmVySFRNTCA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbW90YWJsZUNvbnRlbnQuZm9yRWFjaCh1c2VyID0+IHtcclxuICAgICAgICBjb25zdCByb3cgPSB0YWJsZUJvZHkuaW5zZXJ0Um93KCk7XHJcbiAgICAgICAgdXNlci5mb3JFYWNoKChmaWVsZCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IHJvdy5pbnNlcnRDZWxsKGluZGV4KTtcclxuICAgICAgICAgICAgY2VsbC50ZXh0Q29udGVudCA9IGZpZWxkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIFRoaXMgZnVuY3Rpb24gcmVzZXRzIG9yIGluaXRpYWxpemVzIHRoZSBkZW1vdGFibGUuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXNldFRhYmxlKG5hbWUpIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvY29udHJvbGxlcj9hY3Rpb249aW5pdGlhdGUtdGFibGUmbmFtZT0ke25hbWV9YCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe30pXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICByZXNwb25zZUhhbmRsZXIocmVzcG9uc2VEYXRhLCAncmVzZXRSZXN1bHRNc2cnLCBuYW1lLCBcIlRhYmxlIHJlc2V0IHN1Y2Nlc3NmdWxseSFcIiwgXCJFcnJvciBpbml0aWF0aW5nIHRhYmxlIVwiKTtcclxufVxyXG5cclxuLy8gSW5zZXJ0cyBuZXcgcmVjb3JkcyBpbnRvIHRoZSBkZW1vdGFibGUuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbnNlcnRDaGVmdGFibGUoZXZlbnQsIG5hbWUpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgbmFtZVZhbHVlID0gZXZlbnQudGFyZ2V0LmVsZW1lbnRzWzBdLnZhbHVlXHJcbiAgICBjb25zdCBZT0VWYWx1ZSA9IGV2ZW50LnRhcmdldC5lbGVtZW50c1sxXS52YWx1ZVxyXG4gICAgY29uc3Qgc2VuaW9yaXR5VmFsdWUgPSBldmVudC50YXJnZXQuZWxlbWVudHNbMl0udmFsdWVcclxuICAgIGNvbnN0IGxpY2Vuc2VWYWx1ZSA9IGV2ZW50LnRhcmdldC5lbGVtZW50c1szXS52YWx1ZVxyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvY29udHJvbGxlcj9hY3Rpb249aW5zZXJ0LXRhYmxlJm5hbWU9JHtuYW1lfWAsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgY2hlZl9uYW1lOiBuYW1lVmFsdWUsXHJcbiAgICAgICAgICAgIHllYXJzX29mX2V4cGVyaWVuY2U6IFlPRVZhbHVlLFxyXG4gICAgICAgICAgICBzZW5pb3JpdHk6IHNlbmlvcml0eVZhbHVlLFxyXG4gICAgICAgICAgICBjb29raW5nX2xpY2Vuc2U6IGxpY2Vuc2VWYWx1ZVxyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICByZXNwb25zZUhhbmRsZXIocmVzcG9uc2VEYXRhLCAnaW5zZXJ0UmVzdWx0TXNnJywgbmFtZSwgXCJEYXRhIGluc2VydGVkIHN1Y2Nlc3NmdWxseSFcIiwgXCJFcnJvciBpbnNlcnRpbmcgZGF0YSFcIik7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWxlY3RFcXVpcG1lbnRUYWJsZShldmVudCwgbmFtZSkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IHRhYmxlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdDaGVmdGFibGUnKTtcclxuICAgIGNvbnN0IHRhYmxlQm9keSA9IHRhYmxlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCd0Ym9keScpO1xyXG4gICAgdGFibGVCb2R5LmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIGNvbnN0IGNvbmRpdGlvbiA9IGV2ZW50LnRhcmdldC5lbGVtZW50c1swXS5jaGVja2VkID8gXCJib3RoXCIgOiBcImluZGl2aWR1YWxcIjtcclxuICAgIGNvbnN0IG5hbWVTdHJpbmcgPSBldmVudC50YXJnZXQuZWxlbWVudHNbMl0udmFsdWVcclxuICAgIGNvbnN0IG1hdGVyaWFsU3RyaW5nID0gZXZlbnQudGFyZ2V0LmVsZW1lbnRzWzNdLnZhbHVlXHJcblxyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvY29udHJvbGxlcj9hY3Rpb249c2VsZWN0LWVxdWlwbWVudC10YWJsZWAsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgY29uZGl0aW9uLFxyXG4gICAgICAgICAgICBuYW1lU3RyaW5nLFxyXG4gICAgICAgICAgICBtYXRlcmlhbFN0cmluZ1xyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBjb25zdCBkYXRhID0gcmVzcG9uc2VEYXRhLmRhdGE7XHJcblxyXG4gICAgZGF0YS5mb3JFYWNoKHVzZXIgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IHRhYmxlQm9keS5pbnNlcnRSb3coKTtcclxuICAgICAgICB1c2VyLmZvckVhY2goKGZpZWxkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gcm93Lmluc2VydENlbGwoaW5kZXgpO1xyXG4gICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gZmllbGQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIC8vIGNhbnQgcmVmZXRjaCBkYXRhIGZyb20gdGhlIHRhYmxlXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9qZWN0TWVudUl0ZW1UYWJsZShldmVudCwgYXR0cmlidXRlcykge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2NvbnRyb2xsZXI/YWN0aW9uPXByb2plY3QtbWVudS1pdGVtLXRhYmxlYCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzXHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZURhdGEuZGF0YTtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpXHJcbiAgICBkYXRhLmZvckVhY2godXNlciA9PiB7XHJcbiAgICAgICAgY29uc3Qgcm93ID0gdGFibGVCb2R5Lmluc2VydFJvdygpO1xyXG4gICAgICAgIHVzZXIuZm9yRWFjaCgoZmllbGQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSByb3cuaW5zZXJ0Q2VsbChpbmRleCk7XHJcbiAgICAgICAgICAgIGNlbGwudGV4dENvbnRlbnQgPSBmaWVsZDtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgLy8gY2FudCByZWZldGNoIGRhdGEgZnJvbSB0aGUgdGFibGVcclxufVxyXG5cclxuLy8gQ291bnRzIHJvd3MgaW4gdGhlIGRlbW90YWJsZS5cclxuLy8gTW9kaWZ5IHRoZSBmdW5jdGlvbiBhY2NvcmRpbmdseSBpZiB1c2luZyBkaWZmZXJlbnQgYWdncmVnYXRlIGZ1bmN0aW9ucyBvciBwcm9jZWR1cmVzLlxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY291bnRUYWJsZShuYW1lKSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2NvbnRyb2xsZXI/YWN0aW9uPWNvdW50LXRhYmxlJm5hbWU9JHtuYW1lfWAsIHtcclxuICAgICAgICBtZXRob2Q6ICdHRVQnXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBjb25zdCB0dXBsZUNvdW50ID0gcmVzcG9uc2VEYXRhLmNvdW50O1xyXG4gICAgY29uc3QgbWVzc2FnZSA9IGBUaGUgbnVtYmVyIG9mIHR1cGxlcyBpbiBkZW1vdGFibGU6ICR7dHVwbGVDb3VudH1gO1xyXG4gICAgcmVzcG9uc2VIYW5kbGVyKHJlc3BvbnNlRGF0YSwgJ2NvdW50UmVzdWx0TXNnJywgbmFtZSwgbWVzc2FnZSwgXCJFcnJvciBjb3VudGluZyB0dXBsZXMhXCIpO1xyXG59XHJcblxyXG4vLyBVcGRhdGVzIG5hbWVzIGluIHRoZSByZWNpcGUgdGFibGUuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVOYW1lUmVjaXBldGFibGUoZXZlbnQsIG5hbWUpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3Qgb2xkTmFtZVZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VwZGF0ZU9sZE5hbWUnKS52YWx1ZTtcclxuICAgIGNvbnN0IG5ld05hbWVWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cGRhdGVOZXdOYW1lJykudmFsdWU7XHJcblxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9jb250cm9sbGVyP2FjdGlvbj11cGRhdGUtbmFtZS1yZWNpcGV0YWJsZSZuYW1lPSR7bmFtZX1gLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIG9sZE5hbWU6IG9sZE5hbWVWYWx1ZSxcclxuICAgICAgICAgICAgbmV3TmFtZTogbmV3TmFtZVZhbHVlXHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIHJlc3BvbnNlSGFuZGxlcihyZXNwb25zZURhdGEsICd1cGRhdGVSZXN1bHRNc2cnLCBuYW1lLCBcIk5hbWUgdXBkYXRlZCBzdWNjZXNzZnVsbHkhXCIsIFwiRXJyb3IgdXBkYXRpbmcgbmFtZSFcIik7XHJcbn1cclxuXHJcbi8vIERlbGV0ZSBJRCBpbiB0aGUgcmVjaXBlIHRhYmxlLlxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlSURSZWNpcGV0YWJsZShldmVudCwgbmFtZSkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBjb25zdCByZWNpcGVJZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZWxldGVPbGRJZCcpLnZhbHVlO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvY29udHJvbGxlcj9hY3Rpb249ZGVsZXRlLWlkLXJlY2lwZXRhYmxlJm5hbWU9JHtuYW1lfWAsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgcmVjaXBlSWRcclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzcG9uc2VEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgcmVzcG9uc2VIYW5kbGVyKHJlc3BvbnNlRGF0YSwgJ2RlbGV0ZUlkUmVzdWx0TXNnJywgbmFtZSwgXCJSZWNpcGUgZGVsZXRlZCBzdWNjZXNzZnVsbHkhXCIsIFwiRXJyb3IgZGVsZXRpbmcgcmVjaXBlIVwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVzcG9uc2VIYW5kbGVyKGRhdGEsIGlkLCBuYW1lLCBtZXNzYWdlLCBlcnJNZXNzYWdlKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuXHJcbiAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgZGF0YS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XHJcbiAgICAgICAgZmV0Y2hUYWJsZURhdGEobmFtZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gZXJyTWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4gXHJcbi8vIEdlbmVyYWwgZnVuY3Rpb24gdG8gcmVmcmVzaCB0aGUgZGlzcGxheWVkIHRhYmxlIGRhdGEuIFxyXG4vLyBZb3UgY2FuIGludm9rZSB0aGlzIGFmdGVyIGFueSB0YWJsZS1tb2RpZnlpbmcgb3BlcmF0aW9uIHRvIGtlZXAgY29uc2lzdGVuY3kuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaFRhYmxlRGF0YShuYW1lKSB7XHJcbiAgICBmZXRjaEFuZERpc3BsYXlVc2VycyhuYW1lKTtcclxufVxyXG4iXSwibmFtZXMiOlsiY2hlY2tEYkNvbm5lY3Rpb24iLCJzdGF0dXNFbGVtIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImxvYWRpbmdHaWZFbGVtIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsInN0eWxlIiwiZGlzcGxheSIsImpzb24iLCJ0aGVuIiwicmVzIiwidGV4dENvbnRlbnQiLCJtZXNzYWdlIiwiY2F0Y2giLCJlcnJvciIsImZldGNoQW5kRGlzcGxheVVzZXJzIiwibmFtZSIsInRhYmxlRWxlbWVudCIsInRhYmxlQm9keSIsInF1ZXJ5U2VsZWN0b3IiLCJyZXNwb25zZURhdGEiLCJkZW1vdGFibGVDb250ZW50IiwiZGF0YSIsImlubmVySFRNTCIsImZvckVhY2giLCJ1c2VyIiwicm93IiwiaW5zZXJ0Um93IiwiZmllbGQiLCJpbmRleCIsImNlbGwiLCJpbnNlcnRDZWxsIiwicmVzZXRUYWJsZSIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3BvbnNlSGFuZGxlciIsImluc2VydENoZWZ0YWJsZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJuYW1lVmFsdWUiLCJ0YXJnZXQiLCJlbGVtZW50cyIsInZhbHVlIiwiWU9FVmFsdWUiLCJzZW5pb3JpdHlWYWx1ZSIsImxpY2Vuc2VWYWx1ZSIsImNoZWZfbmFtZSIsInllYXJzX29mX2V4cGVyaWVuY2UiLCJzZW5pb3JpdHkiLCJjb29raW5nX2xpY2Vuc2UiLCJzZWxlY3RFcXVpcG1lbnRUYWJsZSIsImNvbmRpdGlvbiIsImNoZWNrZWQiLCJuYW1lU3RyaW5nIiwibWF0ZXJpYWxTdHJpbmciLCJwcm9qZWN0TWVudUl0ZW1UYWJsZSIsImF0dHJpYnV0ZXMiLCJjb25zb2xlIiwibG9nIiwiY291bnRUYWJsZSIsInR1cGxlQ291bnQiLCJjb3VudCIsInVwZGF0ZU5hbWVSZWNpcGV0YWJsZSIsIm9sZE5hbWVWYWx1ZSIsIm5ld05hbWVWYWx1ZSIsIm9sZE5hbWUiLCJuZXdOYW1lIiwiZGVsZXRlSURSZWNpcGV0YWJsZSIsInJlY2lwZUlkIiwiaWQiLCJlcnJNZXNzYWdlIiwibWVzc2FnZUVsZW1lbnQiLCJzdWNjZXNzIiwiZmV0Y2hUYWJsZURhdGEiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/api/scripts.js\n"));

/***/ })

});